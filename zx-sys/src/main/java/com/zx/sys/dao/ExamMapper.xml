<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zx.sys.dao.ExamMapper" >
  <resultMap id="BaseResultMap" type="com.zx.sys.model.Exam" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="start_time" property="startTime" jdbcType="TIMESTAMP" />
    <result column="end_time" property="endTime" jdbcType="TIMESTAMP" />
    <result column="total_score" property="totalScore" jdbcType="INTEGER" />
    <result column="difficulty" property="difficulty" jdbcType="REAL" />
    <result column="exam_range" property="examRange" jdbcType="INTEGER" />
    <result column="class_range" property="classRange" jdbcType="VARCHAR" />
    <result column="curriculum_id" property="curriculumId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, start_time, end_time, total_score, difficulty, exam_range, class_range, 
    curriculum_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.zx.sys.model.ExamExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from exam
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from exam
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from exam
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zx.sys.model.ExamExample" >
    delete from exam
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zx.sys.model.Exam" >
    insert into exam (id, name, start_time, 
      end_time, total_score, difficulty, 
      exam_range, class_range, curriculum_id
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{startTime,jdbcType=TIMESTAMP}, 
      #{endTime,jdbcType=TIMESTAMP}, #{totalScore,jdbcType=INTEGER}, #{difficulty,jdbcType=REAL}, 
      #{examRange,jdbcType=INTEGER}, #{classRange,jdbcType=VARCHAR}, #{curriculumId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zx.sys.model.Exam" >
    insert into exam
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="startTime != null" >
        start_time,
      </if>
      <if test="endTime != null" >
        end_time,
      </if>
      <if test="totalScore != null" >
        total_score,
      </if>
      <if test="difficulty != null" >
        difficulty,
      </if>
      <if test="examRange != null" >
        exam_range,
      </if>
      <if test="classRange != null" >
        class_range,
      </if>
      <if test="curriculumId != null" >
        curriculum_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null" >
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="totalScore != null" >
        #{totalScore,jdbcType=INTEGER},
      </if>
      <if test="difficulty != null" >
        #{difficulty,jdbcType=REAL},
      </if>
      <if test="examRange != null" >
        #{examRange,jdbcType=INTEGER},
      </if>
      <if test="classRange != null" >
        #{classRange,jdbcType=VARCHAR},
      </if>
      <if test="curriculumId != null" >
        #{curriculumId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zx.sys.model.ExamExample" resultType="java.lang.Integer" >
    select count(*) from exam
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update exam
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.startTime != null" >
        start_time = #{record.startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endTime != null" >
        end_time = #{record.endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.totalScore != null" >
        total_score = #{record.totalScore,jdbcType=INTEGER},
      </if>
      <if test="record.difficulty != null" >
        difficulty = #{record.difficulty,jdbcType=REAL},
      </if>
      <if test="record.examRange != null" >
        exam_range = #{record.examRange,jdbcType=INTEGER},
      </if>
      <if test="record.classRange != null" >
        class_range = #{record.classRange,jdbcType=VARCHAR},
      </if>
      <if test="record.curriculumId != null" >
        curriculum_id = #{record.curriculumId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update exam
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      start_time = #{record.startTime,jdbcType=TIMESTAMP},
      end_time = #{record.endTime,jdbcType=TIMESTAMP},
      total_score = #{record.totalScore,jdbcType=INTEGER},
      difficulty = #{record.difficulty,jdbcType=REAL},
      exam_range = #{record.examRange,jdbcType=INTEGER},
      class_range = #{record.classRange,jdbcType=VARCHAR},
      curriculum_id = #{record.curriculumId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zx.sys.model.Exam" >
    update exam
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null" >
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="totalScore != null" >
        total_score = #{totalScore,jdbcType=INTEGER},
      </if>
      <if test="difficulty != null" >
        difficulty = #{difficulty,jdbcType=REAL},
      </if>
      <if test="examRange != null" >
        exam_range = #{examRange,jdbcType=INTEGER},
      </if>
      <if test="classRange != null" >
        class_range = #{classRange,jdbcType=VARCHAR},
      </if>
      <if test="curriculumId != null" >
        curriculum_id = #{curriculumId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zx.sys.model.Exam" >
    update exam
    set name = #{name,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      total_score = #{totalScore,jdbcType=INTEGER},
      difficulty = #{difficulty,jdbcType=REAL},
      exam_range = #{examRange,jdbcType=INTEGER},
      class_range = #{classRange,jdbcType=VARCHAR},
      curriculum_id = #{curriculumId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>





  <!--  自定义-->

  <select id="selectPagination" resultMap="BaseResultMap">
    select *
    from exam
    limit ${(page - 1) * count},${page * count}
  </select>

  <select id="selectPaginByteach" resultMap="BaseResultMap">
      select *
      from exam e
               join (
          select id
          from curriculum c
                   join (
              select distinct curriculum_id
              from teaching
              where teaching.teacher_id = #{teacherId,jdbcType=INTEGER}
                and #{date,jdbcType=TIMESTAMP} between teaching.start_time and teaching.end_time
          ) t
                        on t.curriculum_id = c.id
      ) c
                    on c.id = e.curriculum_id
      limit ${(page - 1) * count},${page * count}
  </select>

  <update id="updateByInfo">
    update exam
    set name = #{record.name,jdbcType=VARCHAR},
    start_time = #{record.startTime,jdbcType=TIMESTAMP},
    end_time = #{record.endTime,jdbcType=TIMESTAMP},
    total_score = #{record.totalScore,jdbcType=INTEGER},
    difficulty = #{record.difficulty,jdbcType=REAL},
    exam_range = #{record.examRange,jdbcType=INTEGER},
    class_range = #{record.classRange,jdbcType=VARCHAR},
    curriculum_id = #{record.curriculumId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>