<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zx.sys.dao.QuestionMapper" >
  <resultMap id="BaseResultMap" type="com.zx.sys.model.Question" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="type_id" property="typeId" jdbcType="INTEGER" />
    <result column="stem" property="stem" jdbcType="VARCHAR" />
    <result column="option_a" property="optionA" jdbcType="VARCHAR" />
    <result column="option_b" property="optionB" jdbcType="VARCHAR" />
    <result column="option_c" property="optionC" jdbcType="VARCHAR" />
    <result column="option_d" property="optionD" jdbcType="VARCHAR" />
    <result column="answer" property="answer" jdbcType="VARCHAR" />
    <result column="keyword" property="keyword" jdbcType="VARCHAR" />
    <result column="curriculum_id" property="curriculumId" jdbcType="INTEGER" />
    <result column="chapter_id" property="chapterId" jdbcType="INTEGER" />
    <result column="difficulty" property="difficulty" jdbcType="REAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, type_id, stem, option_a, option_b, option_c, option_d, answer, keyword, curriculum_id, 
    chapter_id, difficulty
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.zx.sys.model.QuestionExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from question
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from question
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from question
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zx.sys.model.QuestionExample" >
    delete from question
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zx.sys.model.Question" >
    insert into question (id, type_id, stem, 
      option_a, option_b, option_c, 
      option_d, answer, keyword, 
      curriculum_id, chapter_id, difficulty
      )
    values (#{id,jdbcType=INTEGER}, #{typeId,jdbcType=INTEGER}, #{stem,jdbcType=VARCHAR}, 
      #{optionA,jdbcType=VARCHAR}, #{optionB,jdbcType=VARCHAR}, #{optionC,jdbcType=VARCHAR}, 
      #{optionD,jdbcType=VARCHAR}, #{answer,jdbcType=VARCHAR}, #{keyword,jdbcType=VARCHAR}, 
      #{curriculumId,jdbcType=INTEGER}, #{chapterId,jdbcType=INTEGER}, #{difficulty,jdbcType=REAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zx.sys.model.Question" >
    insert into question
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="typeId != null" >
        type_id,
      </if>
      <if test="stem != null" >
        stem,
      </if>
      <if test="optionA != null" >
        option_a,
      </if>
      <if test="optionB != null" >
        option_b,
      </if>
      <if test="optionC != null" >
        option_c,
      </if>
      <if test="optionD != null" >
        option_d,
      </if>
      <if test="answer != null" >
        answer,
      </if>
      <if test="keyword != null" >
        keyword,
      </if>
      <if test="curriculumId != null" >
        curriculum_id,
      </if>
      <if test="chapterId != null" >
        chapter_id,
      </if>
      <if test="difficulty != null" >
        difficulty,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="typeId != null" >
        #{typeId,jdbcType=INTEGER},
      </if>
      <if test="stem != null" >
        #{stem,jdbcType=VARCHAR},
      </if>
      <if test="optionA != null" >
        #{optionA,jdbcType=VARCHAR},
      </if>
      <if test="optionB != null" >
        #{optionB,jdbcType=VARCHAR},
      </if>
      <if test="optionC != null" >
        #{optionC,jdbcType=VARCHAR},
      </if>
      <if test="optionD != null" >
        #{optionD,jdbcType=VARCHAR},
      </if>
      <if test="answer != null" >
        #{answer,jdbcType=VARCHAR},
      </if>
      <if test="keyword != null" >
        #{keyword,jdbcType=VARCHAR},
      </if>
      <if test="curriculumId != null" >
        #{curriculumId,jdbcType=INTEGER},
      </if>
      <if test="chapterId != null" >
        #{chapterId,jdbcType=INTEGER},
      </if>
      <if test="difficulty != null" >
        #{difficulty,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zx.sys.model.QuestionExample" resultType="java.lang.Integer" >
    select count(*) from question
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update question
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.typeId != null" >
        type_id = #{record.typeId,jdbcType=INTEGER},
      </if>
      <if test="record.stem != null" >
        stem = #{record.stem,jdbcType=VARCHAR},
      </if>
      <if test="record.optionA != null" >
        option_a = #{record.optionA,jdbcType=VARCHAR},
      </if>
      <if test="record.optionB != null" >
        option_b = #{record.optionB,jdbcType=VARCHAR},
      </if>
      <if test="record.optionC != null" >
        option_c = #{record.optionC,jdbcType=VARCHAR},
      </if>
      <if test="record.optionD != null" >
        option_d = #{record.optionD,jdbcType=VARCHAR},
      </if>
      <if test="record.answer != null" >
        answer = #{record.answer,jdbcType=VARCHAR},
      </if>
      <if test="record.keyword != null" >
        keyword = #{record.keyword,jdbcType=VARCHAR},
      </if>
      <if test="record.curriculumId != null" >
        curriculum_id = #{record.curriculumId,jdbcType=INTEGER},
      </if>
      <if test="record.chapterId != null" >
        chapter_id = #{record.chapterId,jdbcType=INTEGER},
      </if>
      <if test="record.difficulty != null" >
        difficulty = #{record.difficulty,jdbcType=REAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update question
    set id = #{record.id,jdbcType=INTEGER},
      type_id = #{record.typeId,jdbcType=INTEGER},
      stem = #{record.stem,jdbcType=VARCHAR},
      option_a = #{record.optionA,jdbcType=VARCHAR},
      option_b = #{record.optionB,jdbcType=VARCHAR},
      option_c = #{record.optionC,jdbcType=VARCHAR},
      option_d = #{record.optionD,jdbcType=VARCHAR},
      answer = #{record.answer,jdbcType=VARCHAR},
      keyword = #{record.keyword,jdbcType=VARCHAR},
      curriculum_id = #{record.curriculumId,jdbcType=INTEGER},
      chapter_id = #{record.chapterId,jdbcType=INTEGER},
      difficulty = #{record.difficulty,jdbcType=REAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zx.sys.model.Question" >
    update question
    <set >
      <if test="typeId != null" >
        type_id = #{typeId,jdbcType=INTEGER},
      </if>
      <if test="stem != null" >
        stem = #{stem,jdbcType=VARCHAR},
      </if>
      <if test="optionA != null" >
        option_a = #{optionA,jdbcType=VARCHAR},
      </if>
      <if test="optionB != null" >
        option_b = #{optionB,jdbcType=VARCHAR},
      </if>
      <if test="optionC != null" >
        option_c = #{optionC,jdbcType=VARCHAR},
      </if>
      <if test="optionD != null" >
        option_d = #{optionD,jdbcType=VARCHAR},
      </if>
      <if test="answer != null" >
        answer = #{answer,jdbcType=VARCHAR},
      </if>
      <if test="keyword != null" >
        keyword = #{keyword,jdbcType=VARCHAR},
      </if>
      <if test="curriculumId != null" >
        curriculum_id = #{curriculumId,jdbcType=INTEGER},
      </if>
      <if test="chapterId != null" >
        chapter_id = #{chapterId,jdbcType=INTEGER},
      </if>
      <if test="difficulty != null" >
        difficulty = #{difficulty,jdbcType=REAL},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zx.sys.model.Question" >
    update question
    set type_id = #{typeId,jdbcType=INTEGER},
      stem = #{stem,jdbcType=VARCHAR},
      option_a = #{optionA,jdbcType=VARCHAR},
      option_b = #{optionB,jdbcType=VARCHAR},
      option_c = #{optionC,jdbcType=VARCHAR},
      option_d = #{optionD,jdbcType=VARCHAR},
      answer = #{answer,jdbcType=VARCHAR},
      keyword = #{keyword,jdbcType=VARCHAR},
      curriculum_id = #{curriculumId,jdbcType=INTEGER},
      chapter_id = #{chapterId,jdbcType=INTEGER},
      difficulty = #{difficulty,jdbcType=REAL}
    where id = #{id,jdbcType=INTEGER}
  </update>






  <!--  自定义-->

  <select id="selectPagination" resultMap="BaseResultMap">
    select *
    from question
    limit ${(page - 1) * count},${page * count}
  </select>

  <select id="selectPaginByTeach" resultType="com.zx.sys.model.Question">
      select *
      from question q
               join (
          select distinct curriculum_id
          from teaching
          where teaching.teacher_id = #{teacherId,jdbcType=INTEGER}
            and #{date,jdbcType=TIMESTAMP} between teaching.start_time and teaching.end_time
      ) c
                    on c.curriculum_id = q.curriculum_id
      limit ${(page - 1) * count},${page * count}
  </select>
  <select id="countByTeacher" resultType="java.lang.Integer">
    select count(*)
    from question q
           join (
        select distinct curriculum_id
        from teaching
        where teaching.teacher_id = #{teacherId,jdbcType=INTEGER}
      )c
                on c.curriculum_id = q.curriculum_id
  </select>

  <update id="updateByInfo">
    update question
    set type_id       = #{record.typeId,jdbcType=INTEGER},
        stem          = #{record.stem,jdbcType=VARCHAR},
        option_a      = #{record.optionA,jdbcType=VARCHAR},
        option_b      = #{record.optionB,jdbcType=VARCHAR},
        option_c      = #{record.optionC,jdbcType=VARCHAR},
        option_d      = #{record.optionD,jdbcType=VARCHAR},
        answer        = #{record.answer,jdbcType=VARCHAR},
        keyword       = #{record.keyword,jdbcType=VARCHAR},
        curriculum_id = #{record.curriculumId,jdbcType=INTEGER},
        chapter_id    = #{record.chapterId,jdbcType=INTEGER},
        difficulty    = #{record.difficulty,jdbcType=REAL}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="countByCurriculum" resultType="java.lang.Integer">
    select count(*)
    from question
    where curriculum_id = #{curriculumId,jdbcType=INTEGER} and type_id = #{typeId,jdbcType=INTEGER}
  </select>
  <select id="selectAllByType" resultType="java.lang.Integer">
      select q.id
      from question q
               join (
              select distinct curriculum_id
              from teaching
              where teaching.teacher_id = #{teacherId,jdbcType=INTEGER}
                and #{date,jdbcType=TIMESTAMP} between teaching.start_time and teaching.end_time
          )c
                    on c.curriculum_id = q.curriculum_id and q.type_id = #{typeId,jdbcType=INTEGER}
                        and (q.difficulty = #{difficulty,jdbcType=FLOAT} or q.difficulty = ${difficulty + 1})
      order by RAND()
      limit #{count,jdbcType=INTEGER}
  </select>
</mapper>