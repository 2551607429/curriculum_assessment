<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zx.sys.dao.NoticeLogMapper" >
  <resultMap id="BaseResultMap" type="com.zx.sys.model.NoticeLog" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="notice_id" property="noticeId" jdbcType="INTEGER" />
    <result column="stu_id" property="stuId" jdbcType="INTEGER" />
    <result column="teacher_id" property="teacherId" jdbcType="INTEGER" />
    <result column="admin_id" property="adminId" jdbcType="INTEGER" />
    <result column="state" property="state" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, notice_id, stu_id, teacher_id, admin_id, state
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.zx.sys.model.NoticeLogExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from notice_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from notice_log
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from notice_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zx.sys.model.NoticeLogExample" >
    delete from notice_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zx.sys.model.NoticeLog" >
    insert into notice_log (id, notice_id, stu_id, 
      teacher_id, admin_id, state
      )
    values (#{id,jdbcType=INTEGER}, #{noticeId,jdbcType=INTEGER}, #{stuId,jdbcType=INTEGER}, 
      #{teacherId,jdbcType=INTEGER}, #{adminId,jdbcType=INTEGER}, #{state,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zx.sys.model.NoticeLog" >
    insert into notice_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="noticeId != null" >
        notice_id,
      </if>
      <if test="stuId != null" >
        stu_id,
      </if>
      <if test="teacherId != null" >
        teacher_id,
      </if>
      <if test="adminId != null" >
        admin_id,
      </if>
      <if test="state != null" >
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="noticeId != null" >
        #{noticeId,jdbcType=INTEGER},
      </if>
      <if test="stuId != null" >
        #{stuId,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null" >
        #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="adminId != null" >
        #{adminId,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zx.sys.model.NoticeLogExample" resultType="java.lang.Integer" >
    select count(*) from notice_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update notice_log
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.noticeId != null" >
        notice_id = #{record.noticeId,jdbcType=INTEGER},
      </if>
      <if test="record.stuId != null" >
        stu_id = #{record.stuId,jdbcType=INTEGER},
      </if>
      <if test="record.teacherId != null" >
        teacher_id = #{record.teacherId,jdbcType=INTEGER},
      </if>
      <if test="record.adminId != null" >
        admin_id = #{record.adminId,jdbcType=INTEGER},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update notice_log
    set id = #{record.id,jdbcType=INTEGER},
      notice_id = #{record.noticeId,jdbcType=INTEGER},
      stu_id = #{record.stuId,jdbcType=INTEGER},
      teacher_id = #{record.teacherId,jdbcType=INTEGER},
      admin_id = #{record.adminId,jdbcType=INTEGER},
      state = #{record.state,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zx.sys.model.NoticeLog" >
    update notice_log
    <set >
      <if test="noticeId != null" >
        notice_id = #{noticeId,jdbcType=INTEGER},
      </if>
      <if test="stuId != null" >
        stu_id = #{stuId,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null" >
        teacher_id = #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="adminId != null" >
        admin_id = #{adminId,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zx.sys.model.NoticeLog" >
    update notice_log
    set notice_id = #{noticeId,jdbcType=INTEGER},
      stu_id = #{stuId,jdbcType=INTEGER},
      teacher_id = #{teacherId,jdbcType=INTEGER},
      admin_id = #{adminId,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>









  <!--  自定义-->

  <select id="selectStudentNoticeLog" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from notice_log
    where notice_id = #{notice_id,jdbcType=INTEGER} and stu_id = #{stu_id,jdbcType=INTEGER} and state = 1
  </select>

  <select id="selectTeacherNoticeLog" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from notice_log
    where notice_id = #{notice_id,jdbcType=INTEGER} and teacher_id = #{teacher_id,jdbcType=INTEGER} and state = 1
  </select>

  <select id="selectAdminNoticeLog" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from notice_log
    where notice_id = #{notice_id,jdbcType=INTEGER} and admin_id = #{admin_id,jdbcType=INTEGER} and state = 1
  </select>

  <select id="deletedStudentNoticeLog" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from notice_log
    where notice_id = #{notice_id,jdbcType=INTEGER} and stu_id = #{stu_id,jdbcType=INTEGER} and state = 2
  </select>

  <select id="deletedTeacherNoticeLog" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from notice_log
    where notice_id = #{notice_id,jdbcType=INTEGER} and teacher_id = #{teacher_id,jdbcType=INTEGER} and state = 2
  </select>

  <select id="deletedAdminNoticeLog" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from notice_log
    where notice_id = #{notice_id,jdbcType=INTEGER} and admin_id = #{admin_id,jdbcType=INTEGER} and state = 2
  </select>



</mapper>